package com.Lukas.Mario.platformer.objects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.LinkedList;

import com.Lukas.Mario.Window.Game;
import com.Lukas.Mario.Window.Handler;
import com.Lukas.Mario.platformer.framework.GameObject;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;

public class Player extends GameObject{
	
	private float width = 32, height = 64;
	
	private float gravity = 0.35f;
	private final float MAX_SPEED = 10;
	
	private Handler handler;
	
	Texture tex = Game.getInstance();
	
	
	public Player(float x, float y, Handler handler, ObjectId id) {
		super(x, y, id);
		this.handler = handler;
	}

	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;
		
		if(falling || jumping) {
			velY += gravity;
		
		
		if(velY > MAX_SPEED)
			velY = MAX_SPEED;
		
		if(Game.score == 100 || Game.score == 101) {
			Game.score = 0;
			Game.tickets++;
		}
			
		
		if(Game.hp == 0) {
			Game.tickets--;
			y = 400;
			velY = 0;
			x = 100;
		}
		
		if(Game.tickets == 0) {
			y = 96;
			x = 100;
		}
		}
		Collision(object);
	}
	
	private void Collision(LinkedList<GameObject> object) {
		for(int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);
			
			if(tempObject.getId() == ObjectId.Block) {
				
				// Top Collision
				if(getBoundsTop().intersects(tempObject.getBounds())) {
					y = tempObject.getY() + 32;
					velY = 0;

				}
				
				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - height;
					velY = 0;
					falling = false;
					jumping = false;
				}else {
					falling = true;
				}
				
				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					x = tempObject.getX() - 32;

				}
				
				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					x = tempObject.getX() + 32;

				}
					
					
				}
			
				if(tempObject.getId() == ObjectId.DeathBlock) {
				// Top Collision
				if(getBoundsTop().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.tickets--;
					}
			
				// Bottom Collision
				if(getBounds().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.tickets--;
					}
				
				// Right Collision
				if(getBoundsRight().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.tickets--;
	
				}
				
				// Left Collision
				if(getBoundsLeft().intersects(tempObject.getBounds())) {
					y = 400;
					velY = 0;
					x = 100;
					Game.tickets--;
	
				}
				
			}
				if(tempObject.getId() == ObjectId.Coin) {
					// Top Collision
					if(getBoundsTop().intersects(tempObject.getBounds())) {
						handler.removeObject(tempObject);
						Game.score++;
						}
				
					// Bottom Collision
					if(getBounds().intersects(tempObject.getBounds())) {
						handler.removeObject(tempObject);
						Game.score++;
						}
					
					// Right Collision
					if(getBoundsRight().intersects(tempObject.getBounds())) {
						handler.removeObject(tempObject);
						Game.score++;
		
					}
					
					// Left Collision
					if(getBoundsLeft().intersects(tempObject.getBounds())) {
						handler.removeObject(tempObject);
						Game.score++;
		
					}
				}
		}
		
		
	}


	public void render(Graphics g) {
		g.setColor(Color.blue);
		g.drawImage(tex.player[0], (int)x, (int)y, null);

		
	}

	public Rectangle getBounds() {
		return new Rectangle((int) ((int)x + (width/2) - ((width/2) / 2)), (int) ((int)y + (height/2)), (int)width/2, (int)height/2);
	}
	
	public Rectangle getBoundsTop() {
		return new Rectangle((int) ((int)x + (width / 2) - ((width/2) / 2)), (int) (int)y, (int)width/2, (int)height/2);
	}
	
	public Rectangle getBoundsRight() {
		return new Rectangle((int) ((int)x + width - 5), (int)y + 5, (int)5, (int)height-10);
	}
	
	public Rectangle getBoundsLeft() {
		return new Rectangle((int)x, (int)y + 5, (int)5, (int)height-10);
	}
	
}
