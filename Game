package com.Lukas.Mario.Window;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.Random;

import com.Lukas.Mario.platformer.framework.KeyInput;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;
import com.Lukas.Mario.platformer.objects.Block;
import com.Lukas.Mario.platformer.objects.Coin;
import com.Lukas.Mario.platformer.objects.DeathBlock;
import com.Lukas.Mario.platformer.objects.Flag;
import com.Lukas.Mario.platformer.objects.Goomba;
import com.Lukas.Mario.platformer.objects.InfoBlock;
import com.Lukas.Mario.platformer.objects.Player;

public class Game extends Canvas implements Runnable 

{
	private static final long serialVersionUID = -8036719210360855328L;
	
	private Thread thread;
	private boolean running = false;
	public static int WIDTH, HEIGHT;
	public BufferedImage level = null, background = null;
	Handler handler;
	static Camera cam;
	static Texture tex;
	Random rand = new Random();
	public static int lives = 5;
	public static int hp = 100;
	public static int score = 0;
	public static int kills = 0;
	public static byte info1 = 0;
	public static byte info2 = 0;
	public static int LEVEL = 1;
	public static int jumps = 0;
	
	
	public void init() {
		
		WIDTH = getWidth();
		HEIGHT = getHeight();
		
		tex = new Texture();		

		BufferedImageLoader loader = new BufferedImageLoader();
		level = loader.loadImage("/real_level.png"); // load the premade level
		background = loader.loadImage("/background.png");
		
		cam = new Camera(0, 0);
		handler = new Handler(cam);
		
		handler.LoadImageLevel(level);
		
		// handler.addObject(new Player(64, 400, handler, ObjectId.Player));
		
		// handler.createLevel();
		
		this.addKeyListener(new KeyInput(handler));
	}
	
	
	public synchronized void start() {
		if(running)
			return;
		
		running = true;
		thread = new Thread(this);
		thread.start();
		
	}


	public void run() 
	{
		init();
		this.requestFocus();
		this.requestFocus();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int updates = 0;
		int frames = 0;
		while(running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1) {
				tick();
				updates++;
				delta--;
			}
			render();
			frames++;
			
			if(System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println("FPS: " + frames + " TICKS: " + updates);
				frames = 0;
				updates = 0;
			}
		}
	} 
	
	private void tick()
	{
	handler.tick();
	for(int i = 0; i < handler.object.size(); i++) {
		if (handler.object.get(i).getId() == ObjectId.Player) {
			cam.tick(handler.object.get(i));
			}
		}
	}
	
	private void render()
	{
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null)
		{
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		Graphics2D g2d = (Graphics2D) g;
		///////////////////////////////////
		
		
		//Draw here
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, getWidth(), getHeight());
		Font hud = new Font("arial", 1, 20);
		
		g.setFont(hud);
		g.setColor(Color.black);
		g.drawString("Score: " + score, 120, 50);
		
		// begin of cam
		g2d.translate(cam.getX(), cam.getY()); 
		
		
		for(int xx = -500; xx < background.getWidth() * 10; xx += background.getWidth()) {
			g.drawImage(background, xx, 0, this);
		}
		for(int xx = -500; xx < background.getWidth() * 10; xx += background.getWidth()) {
			g.drawImage(background, xx, 640, this);
		}
		for(int xx = -500; xx < background.getWidth() * 20; xx += background.getWidth()) {
			g.drawImage(background, xx, 1280, this);
		}
		for(int xx = -500; xx < background.getWidth() * 20; xx += background.getWidth()) {
			g.drawImage(background, xx, 1920, this);
		}
		for(int xx = -500; xx < background.getWidth() * 20; xx += background.getWidth()) {
			g.drawImage(background, xx, 2560, this);
		}
		
		handler.render(g);
		
		if(info1 % 2 != 0) { // skriv hvad der skal ske når man rammer den første info box
			g.setFont(hud);
			g.setColor(Color.black);
			g.drawRect(100, 200, 250, 200);
			g.fillRect(100, 200, 250, 200);
			g.setColor(Color.WHITE);
			g.drawString("Here's how to play!", 110, 220);
		}
		
		if(kills > 0) {
			g.setFont(hud);
			g.setColor(Color.black);
			g.drawString("Good job, you killed an enemy!", 400, 200);
		}
		
		// end of cam
		g2d.translate(-cam.getX(), -cam.getY());
		
		g.setColor(Color.gray);
		g.drawRect(5, 5, 200, 32);
		g.setColor(Color.green);
		g.fillRect(5, 5, hp*2, 32);
		g.setColor(Color.BLACK);
		g.drawRect(5, 5, 200, 32);
		
		g.setFont(hud);
		g.setColor(Color.black);
		g.drawString("Lives: " + lives, 5, 60);
		
		g.setFont(hud);
		g.setColor(Color.black);
		g.drawString("Tickets: " + score, 5, 80);
		
		
		
		
		/////////////////////////////////
		g.dispose();
		bs.show();
		
	}
	
	public static Texture getInstance() {
		return tex;
	}
		
	public static void main(String[] argv) 
	{
		new Window(800, 600, "Political Platformer Game Prototype", new Game());
			
			
	}

}
