package com.Lukas.Mario.platformer.objects;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.LinkedList;
import java.util.Random;

import com.Lukas.Mario.Window.Game;
import com.Lukas.Mario.Window.Handler;
import com.Lukas.Mario.platformer.framework.GameObject;
import com.Lukas.Mario.platformer.framework.ObjectId;
import com.Lukas.Mario.platformer.framework.Texture;

public class Boss extends GameObject {

	private float gravity = 0.35f;
	private final float MAX_SPEED = 10;
	private int velX = -2;
	private Handler handler;
	Random r = new Random();

	Texture tex = Game.getInstance();

	public Boss(float x, float y, int type, Handler handler, ObjectId id) {
		super(x, y, id);
		this.handler = handler;
	}

	public void tick(LinkedList<GameObject> object) {
		x += velX;
		y += velY;

		if (falling || jumping) {
			velY += gravity;

			if (velY > MAX_SPEED) {
				velY = MAX_SPEED;
			}
		}

		if (x < 4100 || x > 4600) {
			reverse();
		}

		int spawn = r.nextInt(100);
		if (spawn == 0) {
			handler.addObject(new Goomba((int) x + 48, (int) y + 48, 1, handler, ObjectId.Enemy));
		}

		int jump = r.nextInt(50);
		if (jump == 0 && jumping == false) {
			velY += -10;
			jumping = true;
		}

		collision(object);
	}

	private void collision(LinkedList<GameObject> object) {
		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ObjectId.Block) {

				if (getBounds().intersects(tempObject.getBounds())) {
					y = tempObject.getY() - 128;
					velY = 0;
					falling = false;
					jumping = false;
				} else {
					falling = true;
				}
			}

			if (tempObject.getId() == ObjectId.DeathBlock) {

				if (getBounds().intersects(tempObject.getBounds())) {

					y = tempObject.getY() - 128;
					falling = false;
				} else {
					falling = true;
				}
			}
		}

	}

	public void reverse() {
		velX *= -1;
	}

	public void render(Graphics g) {

		g.drawImage(tex.boss[0], (int) x, (int) y, null);

	}

	public Rectangle getBounds() {
		return new Rectangle((int) x, (int) y, 64, 128);
	}

	public Rectangle getBoundsRight() {
		return null;
	}

	public Rectangle getBoundsLeft() {
		return null;
	}

	public Rectangle getBoundsTop() {
		return null;
	}

}
